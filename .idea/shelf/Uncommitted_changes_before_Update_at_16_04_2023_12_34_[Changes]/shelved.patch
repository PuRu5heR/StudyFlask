Index: store.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\nimport sqlite3\r\n\r\n\r\nclass Store:\r\n    def __init__(self):\r\n        self.data_base = \"shop.db\"\r\n        con = sqlite3.connect(self.data_base)\r\n        cur = con.cursor()\r\n        cur.execute(\"\"\"CREATE TABLE IF NOT EXISTS store (\r\n        customer_id INTEGER,\r\n        product_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        product_name TEXT,\r\n        category TEXT,\r\n        product_status TEXT,\r\n        product_price REAL,\r\n        valute TEXT,\r\n        image BLOB)\"\"\")\r\n        con.commit()\r\n        con.close()\r\n\r\n    def add_product(self, customer_id, product_name, category, product_price_with_valute):\r\n        product_price = float(product_price_with_valute.split(\" \")[0])\r\n        valute = product_price_with_valute.split(\" \")[1]\r\n\r\n        image = open(\"C:/Users/User/PycharmProjects/Task1/photos/image.jpg\", \"rb\").read()\r\n\r\n        con = sqlite3.connect(self.data_base)\r\n        cur = con.cursor()\r\n        cur.execute(\"\"\"INSERT INTO store (customer_id, product_name, category, product_status, product_price,\r\n                    valute, image) VALUES(?, ?, ?, \"продаётся\", ?, ?, ?)\"\"\",\r\n                    (customer_id, product_name, category, product_price, valute, image))\r\n\r\n        # i = 0\r\n        # while i < len(images) and i < 10:\r\n        #     cur.execute(\"\"\"INSERT INTO store (image?) VALUES(?)\"\"\", (i, images[i]))\r\n        #     i += 1\r\n        #     print(\"Photo \" + i + \" succesfully added\")\r\n        os.remove(\"C:/Users/User/PycharmProjects/Task1/photos/image.jpg\")\r\n        print(\"Product successfully added\")\r\n        con.commit()\r\n        con.close()\r\n        return \"Товар был успешно добавлен\"\r\n\r\n    def check_access(self, customer_id, product_id):\r\n        product_id = int(product_id)\r\n        con = sqlite3.connect(self.data_base)\r\n        cur = con.cursor()\r\n        customer_id_real = \\\r\n        cur.execute(\"\"\"SELECT customer_id FROM store WHERE product_id=?\"\"\", (product_id,)).fetchall()[0][0]\r\n\r\n        if customer_id_real == customer_id:\r\n            print(\"Access allowed\")\r\n            return True\r\n        else:\r\n            print(\"Access not allowed\")\r\n            return False\r\n\r\n    def product_exist(self, product_id):\r\n        con = sqlite3.connect(self.data_base)\r\n        cur = con.cursor()\r\n\r\n        products_ids = cur.execute(\"\"\"SELECT product_id FROM store\"\"\").fetchall()\r\n        for pr_id in products_ids:\r\n            if pr_id[0] == int(product_id):\r\n                print(\"Product exists\")\r\n                return True\r\n        print(\"Product does not exist\")\r\n        return False\r\n\r\n    def remove_product(self, product_id):\r\n        product_id = int(product_id)\r\n        con = sqlite3.connect(self.data_base)\r\n        cur = con.cursor()\r\n\r\n        cur.execute(\"\"\"DELETE FROM store WHERE product_id=?\"\"\", (product_id,))\r\n        print(\"Product was successfully removed\")\r\n        con.commit()\r\n        con.close()\r\n        return \"Товар был успешно удалён\"\r\n\r\n    def remove_all_products(self, customer_id):\r\n        con = sqlite3.connect(self.data_base)\r\n        cur = con.cursor()\r\n\r\n        cur.execute(\"\"\"DELETE FROM store WHERE customer_id=?\"\"\", (int(customer_id),))\r\n        print(\"Products were successfully removed\")\r\n        con.commit()\r\n        con.close()\r\n        return \"Товары были успешно удалены\"\r\n\r\n    def change_product_name(self, product_id, product_name):\r\n        product_id = int(product_id)\r\n        con = sqlite3.connect(self.data_base)\r\n        cur = con.cursor()\r\n\r\n        cur.execute(\"\"\"UPDATE store SET product_name=? WHERE product_id=?\"\"\", (product_name, product_id))\r\n        print(\"Product name was successfully updated\")\r\n        con.commit()\r\n        con.close()\r\n        return \"Название товара было успешно изменено\"\r\n\r\n    def change_product_price(self, product_id, product_price_with_valute):\r\n        product_id = int(product_id)\r\n        product_price = float(product_price_with_valute.split(\" \")[0])\r\n        valute = product_price_with_valute.split(\" \")[1]\r\n        con = sqlite3.connect(self.data_base)\r\n        cur = con.cursor()\r\n\r\n        cur.execute(\"\"\"UPDATE store SET product_price=? WHERE product_id=?\"\"\", (product_price, product_id))\r\n        cur.execute(\"\"\"UPDATE store SET valute=? WHERE product_id=?\"\"\", (valute, product_id))\r\n        print(\"Product price was successfully updated\")\r\n        con.commit()\r\n        con.close()\r\n        return \"Цена товара была успешно изменена\"\r\n\r\n    def change_product_category(self, product_id, category):\r\n        product_id = int(product_id)\r\n        con = sqlite3.connect(self.data_base)\r\n        cur = con.cursor()\r\n\r\n        cur.execute(\"\"\"UPDATE store SET category=? WHERE product_id=?\"\"\", (category, product_id))\r\n        print(\"Category of product name was successfully updated\")\r\n        con.commit()\r\n        con.close()\r\n        return \"Категория товара была успешно изменена\"\r\n\r\n    def change_product_status(self, product_id):\r\n        product_id = int(product_id)\r\n        con = sqlite3.connect(self.data_base)\r\n        cur = con.cursor()\r\n\r\n        status_now = cur.execute(\"\"\"SELECT status FROM store WHERE product_id=?\"\"\", (product_id,))\r\n        if status_now == \"продаётся\":\r\n            status = \"неактивен\"\r\n        else:\r\n            status = \"продаётся\"\r\n\r\n        cur.execute(\"\"\"UPDATE store SET status=? WHERE product_id=?\"\"\", (status, product_id))\r\n        print(\"Status of product name was successfully updated\")\r\n        con.commit()\r\n        con.close()\r\n        return \"Статус товара был сменён на \" + status\r\n\r\n    def get_product_status(self, product_id):\r\n        product_id = int(product_id)\r\n        con = sqlite3.connect(self.data_base)\r\n        cur = con.cursor()\r\n        status_now = cur.execute(\"\"\"SELECT status FROM store WHERE product_id=?\"\"\", (product_id,))\r\n\r\n        if status_now == \"продаётся\":\r\n            return True\r\n        else:\r\n            return False\r\n\r\n    def get_products(self):\r\n        con = sqlite3.connect(self.data_base)\r\n        cur = con.cursor()\r\n        products = cur.execute(\"\"\"SELECT customer_id, product_id, product_name, category, product_status, \r\n        product_price, valute, image FROM store\"\"\").fetchall()\r\n        for i in range(len(products)):\r\n            photo_path = os.path.join(\"photos\", \"image\" + str(products[i][1]) + \".jpg\")\r\n            open(photo_path, \"wb\").write(products[i][7])\r\n\r\n            # for j in range(9, len(products[i])):\r\n            #     images.append(products[i][j])\r\n            data = cur.execute(\"\"\"SELECT surname, name, country, city FROM customers WHERE customer_id=?\"\"\",\r\n                               (str(products[i][0]),)).fetchall()\r\n            surname = str(data[0][0])\r\n            name = str(data[0][1])\r\n            country = str(data[0][2])\r\n            city = str(data[0][3])\r\n            products[i] = [str(products[i][2]), str(products[i][3]), str(products[i][4]), str(products[i][5]) + \" \" +\r\n                           str(products[i][6]), surname + \" \" + name, country, city, str(products[i][1]),\r\n                           products[i][7]]\r\n        return products\r\n\r\n    def search_products(self, search_text):\r\n        con = sqlite3.connect(self.data_base)\r\n        cur = con.cursor()\r\n        products = cur.execute(\"\"\"SELECT customer_id, product_id, product_name, category, product_status, \r\n        product_price, valute, image FROM store\"\"\").fetchall()\r\n        output_products = []\r\n        for i in range(len(products)):\r\n            if search_text in products[i][2]:\r\n                photo_path = os.path.join(\"photos\", \"image\" + str(products[i][1]) + \".jpg\")\r\n                open(photo_path, \"wb\").write(products[i][7])\r\n                data = cur.execute(\"\"\"SELECT surname, name, country, city FROM customers WHERE customer_id=?\"\"\",\r\n                                   (str(products[i][0]),)).fetchall()\r\n                surname = str(data[0][0])\r\n                name = str(data[0][1])\r\n                country = str(data[0][2])\r\n                city = str(data[0][3])\r\n                output_products.append(\r\n                    [str(products[i][2]), str(products[i][3]), str(products[i][4]), str(products[i][5]) + \" \" +\r\n                     str(products[i][6]), surname + \" \" + name, country, city, str(products[i][1]), products[i][7]])\r\n        return output_products\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    store = Store()\r\n    print(store.get_products())\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/store.py b/store.py
--- a/store.py	(revision 55e99874bd27223d7eef63a1e534646d4eb3c36b)
+++ b/store.py	(date 1681626319255)
@@ -171,8 +171,7 @@
             country = str(data[0][2])
             city = str(data[0][3])
             products[i] = [str(products[i][2]), str(products[i][3]), str(products[i][4]), str(products[i][5]) + " " +
-                           str(products[i][6]), surname + " " + name, country, city, str(products[i][1]),
-                           products[i][7]]
+                           str(products[i][6]), surname + " " + name, country + ", " + city, str(products[i][1])]
         return products
 
     def search_products(self, search_text):
@@ -193,7 +192,7 @@
                 city = str(data[0][3])
                 output_products.append(
                     [str(products[i][2]), str(products[i][3]), str(products[i][4]), str(products[i][5]) + " " +
-                     str(products[i][6]), surname + " " + name, country, city, str(products[i][1]), products[i][7]])
+                     str(products[i][6]), surname + " " + name, country + ", " + city, str(products[i][1])])
         return output_products
 
 
Index: bot.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from aiogram import Bot, types, Dispatcher, executor\r\nfrom aiogram.dispatcher.filters.state import StatesGroup, State\r\nfrom aiogram.dispatcher import FSMContext\r\nfrom aiogram.contrib.fsm_storage.memory import MemoryStorage\r\n\r\nfrom store import Store\r\nfrom customers import Customers\r\n\r\n\r\ndef main(store, customer):\r\n    token = open(\"token.txt\", \"r\").read()\r\n    bot = Bot(token=token)\r\n    disp = Dispatcher(bot=bot, storage=MemoryStorage())\r\n    global isRegistration\r\n    isRegistration = False\r\n\r\n    class States(StatesGroup):\r\n        StateRegistration = State()\r\n        StateUpdateData = State()\r\n        StateEnterSurnameAndName = State()\r\n        StateEnterBirth = State()\r\n        StateEnterCountry = State()\r\n        StateEnterCity = State()\r\n        StateEndStart = State()\r\n\r\n        StateDeleteAccount = State()\r\n\r\n        StateEnterProductName = State()\r\n        StateEnterCategory = State()\r\n        StateEnterPrice = State()\r\n        StatePutImage = State()\r\n        StateAddProduct = State()\r\n        StateRemoveProduct = State()\r\n\r\n    # регистрация или авторизация\r\n    @disp.message_handler(commands=[\"start\"])\r\n    async def starting(sms: types.Message):\r\n        DeleteKeyboard = types.ReplyKeyboardRemove()\r\n        await bot.send_message(sms.from_user.id, \"Добро пожаловать в каталог электроники!\", reply_markup=DeleteKeyboard)\r\n        if customer.is_new_customer(sms.from_user.id):\r\n            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, input_field_placeholder=\"Buttons!\")\r\n            keyboard.row(types.KeyboardButton(text=\"Регистрация\"))\r\n            await bot.send_message(sms.from_user.id, \"Требуется регистрация для дальнейшего пользования\",\r\n                                   reply_markup=keyboard)\r\n            await States.StateRegistration.set()\r\n        else:\r\n            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, input_field_placeholder=\"Buttons!\")\r\n            keyboard.row(types.KeyboardButton(text=\"Да\"), types.KeyboardButton(text=\"Нет\"))\r\n            await bot.send_message(sms.from_user.id, customer.get_data(sms.from_user.id))\r\n            await bot.send_message(sms.from_user.id, \"Желаете поменять информацию о вас?\", reply_markup=keyboard)\r\n            await States.StateUpdateData.set()\r\n\r\n    @disp.message_handler(state=States.StateRegistration)\r\n    async def registration(sms: types.Message):\r\n        global isRegistration\r\n        DeleteKeyboard = types.ReplyKeyboardRemove()\r\n        if sms.text == \"Регистрация\":\r\n            isRegistration = True\r\n            await bot.send_message(sms.from_user.id, \"Введите свою фамилию и имя через пробел\",\r\n                                   reply_markup=DeleteKeyboard)\r\n            await States.StateEnterSurnameAndName.set()\r\n        else:\r\n            await sms.answer(\"Не знаю такого! Попробуйте ещё раз\")\r\n\r\n    @disp.message_handler(state=States.StateUpdateData)\r\n    async def update_data(sms: types.Message, state: FSMContext):\r\n        global isRegistration\r\n        DeleteKeyboard = types.ReplyKeyboardRemove()\r\n        if sms.text == \"Да\":\r\n            isRegistration = False\r\n            await bot.send_message(sms.from_user.id, \"Введите свою фамилию и имя через пробел\",\r\n                                   reply_markup=DeleteKeyboard)\r\n            await States.StateEnterSurnameAndName.set()\r\n        elif sms.text == \"Нет\":\r\n            await bot.send_message(sms.from_user.id, \"Тогда можете спокойно продолжить\", reply_markup=DeleteKeyboard)\r\n            await state.finish()\r\n        else:\r\n            await sms.answer(\"Не знаю такого! Попробуйте ещё раз\")\r\n\r\n    @disp.message_handler(state=States.StateEnterSurnameAndName)\r\n    async def enter_full_name(sms: types.Message, state: FSMContext):\r\n        async with state.proxy() as data:\r\n            if len(sms.text.split(\" \")) == 2:\r\n                print(sms.text)\r\n                data['name'] = sms.text\r\n                await sms.answer(\"Введите дату рождения (в формате ДД.ММ.ГГГГ\")\r\n                await States.StateEnterBirth.set()\r\n            else:\r\n                await sms.answer(\"Фамилия и имя введены неверно\")\r\n\r\n    @disp.message_handler(state=States.StateEnterBirth)\r\n    async def enter_birth_date(sms: types.Message, state: FSMContext):\r\n        async with state.proxy() as data:\r\n            if len(sms.text.split(\".\")) == 3:\r\n                print(sms.text)\r\n                data['birth_date'] = sms.text\r\n                await sms.answer(\"Введите страну, в которой находитесь\")\r\n                await States.StateEnterCountry.set()\r\n            else:\r\n                await sms.answer(\"Дата рождения введена неверно\")\r\n\r\n    @disp.message_handler(state=States.StateEnterCountry)\r\n    async def enter_country(sms: types.Message, state: FSMContext):\r\n        async with state.proxy() as data:\r\n            data['country'] = sms.text\r\n            await sms.answer(\"Введите город, в котором находитесь\")\r\n            await States.StateEnterCity.set()\r\n\r\n    @disp.message_handler(state=States.StateEnterCity)\r\n    async def enter_city(sms: types.Message, state: FSMContext):\r\n        async with state.proxy() as data:\r\n            data['city'] = sms.text\r\n        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, input_field_placeholder=\"Buttons!\")\r\n        keyboard.row(types.KeyboardButton(text=\"Закончить\"))\r\n        await bot.send_message(sms.from_user.id, \"Нажмите 'Закончить'\", reply_markup=keyboard)\r\n        await States.StateEndStart.set()\r\n\r\n    @disp.message_handler(state=States.StateEndStart)\r\n    async def ending_start(sms: types.Message, state: FSMContext):\r\n        global isRegistration\r\n        if sms.text == \"Закончить\":\r\n            async with state.proxy() as data:\r\n                DeleteKeyboard = types.ReplyKeyboardRemove()\r\n                if isRegistration:\r\n                    isRegistration = False\r\n                    customer.add_customer(sms.from_user.id, data['name'].split(\" \")[0], data['name'].split(\" \")[1],\r\n                                          data['birth_date'], data['country'], data['city'])\r\n                    await sms.answer(\"Вы закончили регистрацию. Можете спокойно продолжить.\",\r\n                                     reply_markup=DeleteKeyboard)\r\n                else:\r\n                    customer.change_data(sms.from_user.id, data['name'].split(\" \")[0], data['name'].split(\" \")[1],\r\n                                         data['birth_date'], data['country'], data['city'])\r\n                    await sms.answer(\"Вы закончили смену данных. Можете спокойно продолжить.\",\r\n                                     reply_markup=DeleteKeyboard)\r\n            await state.finish()\r\n\r\n        else:\r\n            await sms.answer(\"Не знаю такого! Попробуйте ещё раз\")\r\n\r\n    # удаление аккаунта\r\n    @disp.message_handler(commands=\"delete_account\")\r\n    async def delete_account(sms: types.Message):\r\n        if customer.is_new_customer(sms.from_user.id):\r\n            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, input_field_placeholder=\"Buttons!\")\r\n            keyboard.row(types.KeyboardButton(text=\"Да\"), types.KeyboardButton(text=\"Отмена\"))\r\n            await sms.answer(\"Вы уверены, что хотите безвозвратно удалить аккаунт со всеми выставленными товарами?\",\r\n                             reply_markup=keyboard)\r\n            await States.StateDeleteAccount.set()\r\n        else:\r\n            await sms.answer(\"Для пользования данными командами требуется регистрация\")\r\n\r\n    @disp.message_handler(state=States.StateDeleteAccount)\r\n    async def delete_account(sms: types.Message, state: FSMContext):\r\n        if sms.text == \"Да\":\r\n            DeleteKeyboard = types.ReplyKeyboardRemove()\r\n            customer.remove_customer(sms.from_user.id)\r\n            store.remove_all_products(sms.from_user.id)\r\n            await sms.answer(\"Аккаунт был успешно удалён\", reply_markup=DeleteKeyboard)\r\n            await state.finish()\r\n        elif sms.text == \"Отмена\":\r\n            DeleteKeyboard = types.ReplyKeyboardRemove()\r\n            await sms.answer(\"Аккаунт не был удалён\", reply_markup=DeleteKeyboard)\r\n            await state.finish()\r\n        else:\r\n            await sms.answer(\"Не знаю такого! Попробуйте ещё раз\")\r\n\r\n    # добавление товара\r\n    @disp.message_handler(commands=\"add_product\")\r\n    async def add_product(sms: types.Message):\r\n        await sms.answer(\"Введите название товара\")\r\n        await States.StateEnterProductName.set()\r\n\r\n    @disp.message_handler(state=States.StateEnterProductName)\r\n    async def enter_product_name(sms: types.Message, state: FSMContext):\r\n        async with state.proxy() as data:\r\n            data['product_name'] = sms.text\r\n        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, input_field_placeholder=\"Buttons!\")\r\n        keyboard.row(types.KeyboardButton(text=\"Компьютеры\"), types.KeyboardButton(text=\"Комплектующие\"))\r\n        keyboard.row(types.KeyboardButton(text=\"Аудио\"), types.KeyboardButton(text=\"Клавиатуры, мышки и коврики\"))\r\n        keyboard.row(types.KeyboardButton(text=\"Телефоны и планшеты\"), types.KeyboardButton(text=\"Другое\"))\r\n        await sms.answer(\"Введите категорию, к которой относится товар\", reply_markup=keyboard)\r\n        await States.StateEnterCategory.set()\r\n\r\n    @disp.message_handler(state=States.StateEnterCategory)\r\n    async def enter_category(sms: types.Message, state: FSMContext):\r\n        if sms.text in [\"Компьютеры\", \"Комплектующие\", \"Аудио\", \"Клавиатуры, мышки и коврики\", \"Телефоны и планшеты\",\r\n                        \"Другое\"]:\r\n            async with state.proxy() as data:\r\n                data['category'] = sms.text\r\n            DeleteKeyboard = types.ReplyKeyboardRemove()\r\n            await sms.answer(\"Введите цену товара\", reply_markup=DeleteKeyboard)\r\n            await States.StateEnterPrice.set()\r\n        else:\r\n            await sms.answer(\"Не знаю такого! Попробуйте ещё раз\")\r\n\r\n    @disp.message_handler(state=States.StateEnterPrice)\r\n    async def enter_price(sms: types.Message, state: FSMContext):\r\n        if len(sms.text.split(\" \")) == 2:\r\n            async with state.proxy() as data:\r\n                data['product_price'] = sms.text\r\n            await sms.answer(\"Пришлите картинку, которую желаете вставить\")\r\n            await States.StatePutImage.set()\r\n        else:\r\n            await sms.answer(\"Нужно ввести сумму вместе с валютой через пробел\")\r\n\r\n    @disp.message_handler(state=States.StatePutImage, content_types=['photo'])\r\n    async def put_image(sms: types.Message):\r\n        await sms.photo[-1].download(destination_file=\"C:/Users/User/PycharmProjects/Task1/photos/image.jpg\")\r\n        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, input_field_placeholder=\"Buttons!\")\r\n        keyboard.row(types.KeyboardButton(text=\"Готово\"))\r\n        await sms.answer(\"Нажмите 'Готово'\", reply_markup=keyboard)\r\n        await States.StateAddProduct.set()\r\n\r\n    @disp.message_handler(state=States.StateAddProduct)\r\n    async def add_product(sms: types.Message, state: FSMContext):\r\n        if sms.text == \"Готово\":\r\n            async with state.proxy() as data:\r\n                store.add_product(sms.from_user.id, data['product_name'], data['category'], data['product_price'])\r\n                DeleteKeyboard = types.ReplyKeyboardRemove()\r\n                await state.finish()\r\n                await sms.answer(\"Товар успешно добавлен в каталог\", reply_markup=DeleteKeyboard)\r\n        else:\r\n            await sms.answer(\"Не знаю такого! Попробуйте ещё раз\")\r\n\r\n    # удаление товара\r\n    @disp.message_handler(commands='remove_product')\r\n    async def remove_product(sms: types.Message, state: FSMContext):\r\n        product_id = sms.get_args()\r\n        if store.check_access(sms.from_user.id, product_id) and store.product_exist(product_id):\r\n            async with state.proxy() as data:\r\n                data['product_id'] = product_id\r\n            await States.StateRemoveProduct.set()\r\n            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, input_field_placeholder=\"Buttons!\")\r\n            keyboard.row(types.KeyboardButton(text=\"Да\"), types.KeyboardButton(text=\"Отмена\"))\r\n            await sms.answer(\"Вы уверены, что хотите удалить товар\")\r\n        else:\r\n            await sms.answer(\"Данного товара не существует в вашем каталоге\")\r\n\r\n    @disp.message_handler(state=States.StateRemoveProduct)\r\n    async def end_removing_product(sms: types.Message, state: FSMContext):\r\n        if sms.text == \"Да\":\r\n            DeleteKeyboard = types.ReplyKeyboardRemove()\r\n            async with state.proxy() as data:\r\n                await sms.answer(store.remove_product(data['product_id']), reply_markup=DeleteKeyboard)\r\n            await state.finish()\r\n        elif sms.text == \"Отмена\":\r\n            DeleteKeyboard = types.ReplyKeyboardRemove()\r\n            await state.finish()\r\n            await sms.answer(\"Удаление товара было отменено\", reply_markup=DeleteKeyboard)\r\n        else:\r\n            await sms.answer(\"Не знаю такого\")\r\n\r\n    # вывод каталога\r\n    @disp.message_handler(commands=\"catalog\")\r\n    async def show_catalog(sms: types.Message):\r\n        catalog = store.get_products()\r\n        for i in range(len(catalog)):\r\n            await bot.send_photo(sms.from_user.id, photo=types.InputFile(\"C:/Users/User/PycharmProjects/Task1/photos\"\r\n                                                                         \"/image\" + catalog[i][7] + \".jpg\"))\r\n            await sms.answer(catalog[i])\r\n\r\n    executor.start_polling(disp)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    store = Store()\r\n    customers = Customers()\r\n    main(store, customers)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bot.py b/bot.py
--- a/bot.py	(revision 55e99874bd27223d7eef63a1e534646d4eb3c36b)
+++ b/bot.py	(date 1681626319244)
@@ -205,7 +205,7 @@
 
     @disp.message_handler(state=States.StatePutImage, content_types=['photo'])
     async def put_image(sms: types.Message):
-        await sms.photo[-1].download(destination_file="C:/Users/User/PycharmProjects/Task1/photos/image.jpg")
+        await sms.photo[-1].download(destination_file="photos/image.jpg")
         keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, input_field_placeholder="Buttons!")
         keyboard.row(types.KeyboardButton(text="Готово"))
         await sms.answer("Нажмите 'Готово'", reply_markup=keyboard)
@@ -255,9 +255,11 @@
     async def show_catalog(sms: types.Message):
         catalog = store.get_products()
         for i in range(len(catalog)):
-            await bot.send_photo(sms.from_user.id, photo=types.InputFile("C:/Users/User/PycharmProjects/Task1/photos"
-                                                                         "/image" + catalog[i][7] + ".jpg"))
-            await sms.answer(catalog[i])
+            message = catalog[i][0] + "\nКатегория: " + catalog[i][1] + "\nСтатус: " + catalog[i][2] + "\nЦена: " \
+                      + catalog[i][3] + "\nПродавец: " + catalog[i][4] + "\nМестоположение: " + catalog[i][5] \
+                      + "\nID: " + catalog[i][6]
+            await bot.send_photo(sms.from_user.id, photo=types.InputFile("photos\image" + catalog[i][6] + ".jpg"))
+            await sms.answer(message)
 
     executor.start_polling(disp)
 
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Flask, render_template, request\r\nfrom store import Store\r\nfrom customers import Customers\r\n\r\napp = Flask(__name__)\r\n\r\n\r\n@app.route(\"/\")\r\ndef index():\r\n    return render_template(\"index.html\")\r\n\r\n\r\n@app.route(\"/info\")\r\ndef info():\r\n    return render_template(\"info.html\")\r\n\r\n\r\n@app.route(\"/table\")\r\ndef table():\r\n    return render_template(\"table.html\")\r\n\r\n\r\n@app.route(\"/sql\")\r\n@app.route(\"/sql\", methods=[\"POST\"])\r\ndef sql():\r\n    store = Store()\r\n    if request.method == \"POST\":\r\n        search_text = request.form['search']\r\n        products = store.search_products(search_text)\r\n    else:\r\n        products = store.get_products()\r\n    return render_template(\"sql.html\", products=products, length_list=len(products))\r\n\r\n\r\n@app.route(\"/time\")\r\ndef time():\r\n    return render_template(\"time.html\")\r\n\r\n\r\n@app.route(\"/forma\")\r\n@app.route(\"/forma\", methods=[\"POST\"])\r\ndef forma():\r\n    if request.method == \"POST\":\r\n        customers = Customers()\r\n        birth_date = request.form['birth_date'].split(\"-\")\r\n        birth_date = birth_date[2] + \".\" + birth_date[1] + \".\" + birth_date[0]\r\n        customers.add_customer(0, request.form['surname'], request.form['name'], birth_date, request.form['country'],\r\n                               request.form['city'])\r\n    return render_template(\"forma.html\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    app.run(host=\"192.168.58.2\", debug=True)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 55e99874bd27223d7eef63a1e534646d4eb3c36b)
+++ b/main.py	(date 1681623839745)
@@ -50,4 +50,4 @@
 
 
 if __name__ == "__main__":
-    app.run(host="192.168.58.2", debug=True)
+    app.run(host="192.168.1.132", debug=True)
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.9\" project-jdk-type=\"Python SDK\" />\r\n  <component name=\"PyCharmProfessionalAdvertiser\">\r\n    <option name=\"shown\" value=\"true\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 55e99874bd27223d7eef63a1e534646d4eb3c36b)
+++ b/.idea/misc.xml	(date 1681623706825)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.11 (TaskFlask1)" project-jdk-type="Python SDK" />
   <component name="PyCharmProfessionalAdvertiser">
     <option name="shown" value="true" />
   </component>
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"c3321cbc-01ea-4180-9b0e-6a84e165d035\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/main.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/main.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/templates/index.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/templates/index.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/templates/sql.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/templates/sql.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/templates/table.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/templates/table.html\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n        <option value=\"HTML File\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2NXiyhUPxvvVAoOtKo8eXPb5uGC\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;DefaultHtmlFileTemplate&quot;: &quot;HTML File&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/User/PycharmProjects/StudyPython/ElectronicStore&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\User\\PycharmProjects\\Task1\" />\r\n      <recent name=\"C:\\Users\\User\\PycharmProjects\\Task1\\static\\images\" />\r\n      <recent name=\"C:\\Users\\User\\PycharmProjects\\Task1\\static\" />\r\n      <recent name=\"C:\\Users\\User\\PycharmProjects\\Task1\\templates\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.main\">\r\n    <configuration name=\"bot\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Task1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/bot.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"main (1)\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Task1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/ElectronicStore\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/ElectronicStore/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Task1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"store\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Task1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/store.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"test1\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Task1\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/test1.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.main\" />\r\n        <item itemvalue=\"Python.bot\" />\r\n        <item itemvalue=\"Python.store\" />\r\n        <item itemvalue=\"Python.test1\" />\r\n        <item itemvalue=\"Python.main (1)\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"c3321cbc-01ea-4180-9b0e-6a84e165d035\" name=\"Changes\" comment=\"\" />\r\n      <created>1679817083902</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1679817083902</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 55e99874bd27223d7eef63a1e534646d4eb3c36b)
+++ b/.idea/workspace.xml	(date 1681637667550)
@@ -2,11 +2,13 @@
 <project version="4">
   <component name="ChangeListManager">
     <list default="true" id="c3321cbc-01ea-4180-9b0e-6a84e165d035" name="Changes" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/Task1.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/Task1.iml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bot.py" beforeDir="false" afterPath="$PROJECT_DIR$/bot.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/templates/index.html" beforeDir="false" afterPath="$PROJECT_DIR$/templates/index.html" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/templates/sql.html" beforeDir="false" afterPath="$PROJECT_DIR$/templates/sql.html" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/templates/table.html" beforeDir="false" afterPath="$PROJECT_DIR$/templates/table.html" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/shop.db" beforeDir="false" afterPath="$PROJECT_DIR$/shop.db" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/store.py" beforeDir="false" afterPath="$PROJECT_DIR$/store.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -49,7 +51,7 @@
       <recent name="C:\Users\User\PycharmProjects\Task1\templates" />
     </key>
   </component>
-  <component name="RunManager" selected="Python.main">
+  <component name="RunManager" selected="Python.bot">
     <configuration name="bot" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
       <module name="Task1" />
       <option name="INTERPRETER_OPTIONS" value="" />
@@ -157,9 +159,9 @@
     </configuration>
     <recent_temporary>
       <list>
-        <item itemvalue="Python.main" />
         <item itemvalue="Python.bot" />
         <item itemvalue="Python.store" />
+        <item itemvalue="Python.main" />
         <item itemvalue="Python.test1" />
         <item itemvalue="Python.main (1)" />
       </list>
Index: .idea/Task1.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\" />\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/Task1.iml b/.idea/Task1.iml
--- a/.idea/Task1.iml	(revision 55e99874bd27223d7eef63a1e534646d4eb3c36b)
+++ b/.idea/Task1.iml	(date 1681623706814)
@@ -1,8 +1,10 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <module type="PYTHON_MODULE" version="4">
   <component name="NewModuleRootManager">
-    <content url="file://$MODULE_DIR$" />
-    <orderEntry type="inheritedJdk" />
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/venv" />
+    </content>
+    <orderEntry type="jdk" jdkName="Python 3.11 (TaskFlask1)" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
